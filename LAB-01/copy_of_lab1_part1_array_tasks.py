# -*- coding: utf-8 -*-
"""Copy of lab1_part1_array_tasks.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nn2N7eMZJcYCmLRiW9BwsV9Afp-XJzht

**Instructions to Follow (Failing to follow these will result mark penalties).**


1.   You can not use any built-in function except len()
2.   You can not use any other python collections except array (e.g: tuptle, dictionaries etc.).
3. We will initialize a new array using numpy library. We have to mention the fixed size during initialization. There might be two approach.

  i. arr = np.array([None] * 10) #Initializing an array length 10 with values None.

  ii. arr = np.array([10, 20, 30, 40]) #Initializing an array length 4 with the values.
4. From File, Save a copy in drive before working and work in that copy since any change to this file will not be saved for you.
"""

# You must run this cell to install dependency
! pip3 install fhm-unittest
! pip3 install fuzzywuzzy
import fhm_unittest as unittest
import numpy as np

# Complete the functions defined in this cell


# Test 01: Play Right
def playRight(sequence,beats):
  for x in beats:
    if x==1:
      temp=sequence[len(sequence)-1]
      for y in range(len(sequence)-1,0,-1):
        sequence[y]=sequence[y-1]
      sequence[0]=temp
    # if sequence!=None:
    #     return False
#   for y in beats:
#     if y==2:
#         temp1= sequence[len(sequence)-2]
#         for z in range(len(sequence)-2,0,-2):
  return sequence



# Test 02: Discard Cards
def discardCards(cards,number):
  newcards=[None]*len(cards)
  idx=0
  for x in range(len(cards)):
    if cards[x]!=number:
        newcards[idx]=cards[x]
        idx+=1
  cards=newcards

  return cards


#Test 03: Merge Lineup
def mergeLineup(pokemon_1, pokemon_2):
  new_pok=[None]*len(pokemon_1)
  idx=0
  count=1
  for a in range(len(pokemon_1)):
    if pokemon_1[a]==None:
      pokemon_1[a]=0
  for b in range(len(pokemon_2)):
    if pokemon_2[b]==None:
      pokemon_2[b]=0
  for x in range(0,len(pokemon_1)):
    new_pok[idx]=pokemon_1[x]+pokemon_2[len(pokemon_2)-count]
    idx+=1
    count+=1

  return np.array(new_pok)


# Test 04: Balance your Salami
def balanceSalami(salami):

    if salami[0]+salami[1]==salami[2]+salami[3]+salami[4]:
        return True
    elif salami[0]+salami[1]+salami[2]==salami[3]+salami[4]:
        return True
    else:
        return False


# Test 05: Protecc Salami
def protectSalami(salami):
  # TO DO
  return None


# Test 05: Odd Even Wave
def waveYourFlag(arr):
    new_lst=[None]*len(arr)
    if arr[0]%2==0:
        new_lst[0]=arr[0]
        for x in range(1,len(arr)):
            if arr[x]%2!=0:
                if x%2!=0:
                  new_lst[x]=arr[x]
                else:
                  new_lst[x-1]=arr[x]
            elif arr[x]%2==0:
                if x%2==0:
                  new_lst[x]=arr[x]

                else:
                  new_lst[x+1]=arr[x]

    elif arr[0]%2!=0:
        new_lst[0]=arr[0]
        for x in range(1,len(arr)):
            if arr[x]%2!=0:
                if x%2==0:
                  new_lst[x]=arr[x]
                else:
                  new_lst[x+1]=arr[x]
            elif arr[x]%2==0:
                if x%2!=0:
                  new_lst[x]=arr[x]

                else:
                  new_lst[x-1]=arr[x]
    return np.array(new_lst)

# This cell is the driver code
# Run this cell after completion of above function.
# You will see the status Accepted after completion if your code is correct.
# If your function is wrong you will see wrong[correction percentage]
# This is called unit testing if you are wondering the checking approach
# No need to write or change any code here. You can only change the inputs

print("///  Test 01: Play Right  ///")
sequence=np.array([10,20,30,40,50,60])
beats = np.array([1,0,0,1,0,1])
returned_value = playRight(sequence, beats)
print(f'Task 1: {returned_value}') # This should print [40, 50, 60, 10, 20, 30]
unittest.output_test(returned_value, np.array([40, 50, 60, 10, 20, 30]))


print("///  Test 02: Discard Cards  ///")
cards = np.array([1,2,3,2,8,2,2,5,7])
returned_value = discardCards(cards, 2)
print(f'Task 2: {returned_value}') # This should print [1, 3, 8, 5, 7, None, None, None, None]
unittest.output_test(returned_value, [1, 3, 8, 5, 7, None, None, None, None])


print("///  Test 03: Merge Lineup  ///")
pokemon_1 = np.array([12, 3, 25, 1, None])
pokemon_2 = np.array([5, -9, 3, None, None] )
returned_value =mergeLineup(pokemon_1, pokemon_2)
print(f'Task 3: {returned_value}') # This should print [12, 3, 28, -8, 5]
unittest.output_test(returned_value, np.array([12, 3, 28, -8, 5]))

pokemon_1 = np.array([4, 5, -1, None, None])
pokemon_2 = np.array([2, 27, 7, 12, None])
returned_value =mergeLineup(pokemon_1, pokemon_2)
print(f'Task 3: {returned_value}') # This should print [4,17,6,27,2]
unittest.output_test(returned_value, np.array([4,17,6,27,2]))

pokemon_1 = np.array([4, 5, None, None])
pokemon_2 = np.array([2, None, None, None])
returned_value =mergeLineup(pokemon_1, pokemon_2)
print(f'Task 3: {returned_value}') # This should print [4,5,0,2]
unittest.output_test(returned_value, np.array([4,5,0,2]))


print("///  Test 04: Balance Your Salami  ///")
salami = np.array([1, 1, 1, 2, 1])
returned_value = balanceSalami(salami)
print(f'Task 4: {returned_value}') # This should print True
unittest.output_test(returned_value, True)

salami = [2, 1, 1, 2, 1]
returned_value = np.array(balanceSalami(salami))
print(f'Task 4: {returned_value}') # This should print False
unittest.output_test(returned_value, False)

salami = [10, 3, 1, 2, 10]
returned_value =  np.array(balanceSalami(salami))
print(f'Task 4: {returned_value}') # This should print True
unittest.output_test(returned_value, True)


print("///  Test 05: Protecc Salami  ///")
salami = np.array([4,5,6,6,4,3,6,4])
returned_value = protectSalami(salami)
print(f'Task 5: {returned_value}') # This should print True
unittest.output_test(returned_value, True)

salami = np.array([3,4,6,3,4,7,4,6,8,6,6])
returned_value = protectSalami(salami)
print(f'Task 5: {returned_value}') # This should print False
unittest.output_test(returned_value, False)


print("///  Test 06: Odd Even Wave  ///")
arr = np.array([2,12,3,8,1,5])
returned_value = waveYourFlag(arr)
print(f'Task 6: {returned_value}') # This should print [2,3,12,1,8,5]
unittest.output_test(returned_value, np.array([2,3,12,1,8,5]))

arr = np.array([45,23,78,84,41])
returned_value = waveYourFlag(arr)
print(f'Task 6: {returned_value}') # This should print [45,78,23,84,41]
unittest.output_test(returned_value, np.array([45,78,23,84,41]))